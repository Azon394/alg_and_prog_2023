using namespace std;
#include <sstream>  
#include <cctype>
#include <algorithm>
class Complex {
public:
	double re;
	double im;
	Complex(string num) {
		string str = num;
		str.erase(std::remove(str.begin(), str.end(), ' '), str.end());
		std::istringstream iss(str);
		iss >> re >> im;
	}
	Complex(double real, double imag) : re(real), im(imag) {}
	friend std::ostream& operator<<(std::ostream& out, const Complex& num) {
		out << (num.re == 0.0 ? 0.0 : num.re)
			<< (num.im < 0 ? "" : "+")
			<< (num.im == 0.0 ? 0.0 : num.im) << 'j';
		return out;
	}
	friend Complex operator + (Complex c1, Complex c2) {
		return Complex(c1.re + c2.re, c1.im + c2.im);
	}
	friend Complex operator - (Complex c1, Complex c2) {
		return Complex(c1.re - c2.re, c1.im - c2.im);
	}
	friend Complex operator * (Complex c1, Complex c2) {
		return Complex(c1.re * c2.re - c1.im * c2.im, c1.im * c2.re + c2.im * c1.re);
	}
	friend Complex operator / (Complex c1, Complex c2) {
		return Complex((c1.re * c2.re + c1.im * c2.im) / (c2.re * c2.re + c2.im * c2.im), (c1.im * c2.re - c1.re * c2.im) / (c2.re * c2.re + c2.im * c2.im));
	}
};
